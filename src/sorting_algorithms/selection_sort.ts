/**
 * Сортировка выбором - O(n^2)
 *
 * Эта сортировка работает, начиная с начала массива и сравнивая первый элемент с оставшимися элементами.
 * После проверки всех элементов наименьший элемент помещается в первую позицию массива, и алгоритм переходит ко второй позиции.
 * Этот процесс продолжается до тех пор, пока алгоритм не достигнет предпоследней позиции в массиве, после чего все данные сортируются.
 *
 * В алгоритме сортировки выбором используются вложенные циклы.
 * Внешний цикл перемещается от первого элемента массива к предпоследнему элементу;
 * внутренний цикл перемещается от второго элемента массива к последнему элементу, ища значения, которые меньше элемента, на который в данный момент указывает внешний цикл.
 * После каждой итерации внутреннего цикла наименьшему значению в массиве присваивается его надлежащее место в массиве.
 */
export function selectionSort(originArray: readonly number[]): number[] {
  // Создаем копию исходного массива, чтобы не изменять его
  const array = [...originArray];

  // Внешний цикл: перебираем элементы от начала до предпоследнего
  for (let i = 0; i < array.length - 1; i++) {
    // Индекс минимального элемента в текущей итерации
    let minIndex = i;

    // Внутренний цикл: ищем минимальный элемент среди оставшихся
    for (let j = i + 1; j < array.length; j++) {
      // Если текущий элемент меньше минимального, обновляем индекс минимального
      if (array[j] < array[minIndex]) {
        minIndex = j;
      }
    }

    // Если минимальный элемент не совпадает с текущим, меняем их местами
    if (minIndex !== i) {
      [array[i], array[minIndex]] = [array[minIndex], array[i]];
    }
  }

  return array;
}
